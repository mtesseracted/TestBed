# PS1 setting function, features:
# print in color if available
# first print user@host:time/cmd time
#   highlight host color if SSH session
# print abbreviated path that dynamically
#   abbreviates the dir names to be shorter
#   the longer the total path is
# print the last exit status at the end    

#  UPDATE: print last cmd time if >X1_DELAY
##  This may overwrite defined history settings!!
##  Untested in tmux

tput colors &>/dev/null #check for colors first
if [ $? -eq 0 ]; then
    X1_SCOLG='\[\e[1;32m\]' #green
    X1_SCOLG0='\[\e[0;32m\]' #green unbold
    X1_SCOLC='\[\e[1;36m\]' #cyan
    X1_SCOLB='\[\e[1;34m\]' #blue
    X1_SCOLR='\[\e[1;31m\]' #red
    X1_ECOL='\[\e[00m\]' #end colors
else
    X1_SCOLG=''
    X1_SCOLG0=''
    X1_SCOLC=''
    X1_SCOLB=''
    X1_SCOLR=''
    X1_ECOL=''
fi

if [ -z "$HISTTIMEFORMAT" ] || [ "$HISTTIMEFORMAT" = '%s ' ]; then
    HISTCONTROL=''
    HISTTIMEFORMAT='%s '
    X1_CMDTIME=$(date +%s)
    X1_DELAY='30'
else
    #Already set, don't overwrite
    echo 'No X1PS1 timing info, HISTTIMEFORMAT already set'
    X1_TIMING='false'
fi
 
X1FormTime(){ #Convert sec to min sec for display
    local min=$(($1 / 60))
    local sec=$(($1 - ($min * 60) ))
    sec=$(printf '%02d' $sec)
    echo "${min}m${sec}s"
}

get_PS1() {

    local x1time="\A" #Displayed time variable
    if [ -z "$X1_TMING" ]; then
        #check against last prompt first (only 1 subshell call)
        if [ $(($(date +%s) - $X1_CMDTIME)) -gt $X1_DELAY ]; then
	    X1_CMDTIME=$(date +%s)
	    local x1tmp=$(history 1 |cut -f4 -d' ') #actual
	    if [ $(($X1_CMDTIME - $x1tmp)) -gt $X1_DELAY ]; then
		x1tmp=$(($X1_CMDTIME - $x1tmp))
		x1time=$(X1FormTime $x1tmp)
    fi; fi; fi

    local stat="$?" #get last exits status
    if [ $stat = 0 ]; then #set exit status color
        stat=""
    else
	stat="${X1_SCOLR}${stat}${X1_ECOL}"
    fi

    #get the pwd split into dirs
    local IFS="/"
    local PARTS=()
    read -ra PARTS <<< "$PWD" 
    local plast="${#PARTS[@]}"
    plast=$(($plast-1))

    #get the home dir and check if the
    #beginning of pwd matches
    local HPATH=()
    read -ra HPATH <<< "$HOME"

    local j=0
    local same=0
    if [ "${#HPATH[@]}" -gt 0 ]; then
	for i in "${HPATH[@]}"; do
	    if [ "$i" != "${PARTS[$j]}" ]; then 
		same=1
	    fi
	    j=$(($j + 1))
	done
    else
	same=1
    fi
    if [ $same = 0 ]; then
	#if we are in a sub-dir of $HOME
	#then shorten to cut off from pwd
	unset "HPATH[${#HPATH[@]}-1]"
	j=1
	for i in "${HPATH[@]}"; do
	    #this shrinks parts but leaves the
	    #first element which is a space
	    unset "PARTS[$j]"
	    j=$(($j+1))
	done
    fi

    #Now get the current dir and shrink pwd
    if [ ${#PARTS[@]} -gt 1 ]; then
	#local cdir="${PARTS[-1]}"
	local cdir="${PARTS[$plast]}"
	unset "PARTS[$plast]"
    else
	#we're in the home or root dir
	local cdir=""
	PARTS=""
    fi

    #set how much to abbreviate dir names
    local lenmax=3
    local plen=$(($lenmax*$plast +${#cdir}))
    if [ $plen -gt 24 ]; then
	lenmax=$(($lenmax -1))
	plen=$(($lenmax*$plast +${#cdir}))
	if [ $plen -gt 30 ]; then
	    lenmax=$(($lenmax -1))
	fi
    fi

    #now set the directory to display in PS1
    local dispdir=""
    for i in "${PARTS[@]}"; do
	if [ "$i" == "" ]; then
	    #PARTS[0] == "" from read
	    if [ $same = 0 ]; then
		#we're in a sub-dir of HOME
		i="~"
		dispdir="${dispdir}$i"
	    fi
	else
	    if [ "${#i}" -gt $lenmax ]; then
		i=${i::$lenmax}
	    fi
	    dispdir="${dispdir}/$i"
	fi
    done
    #append the cdir if we aren't in HOME
    if [ "$cdir" != "" ]; then
	dispdir="$dispdir/$cdir"
    fi

    #check if we're in an ssh session
    if [ -n "$SSH_CLIENT" ]; then
	local host="$X1_SCOLG\h$X1_ECOL" #bold
    else
	local host="$X1_SCOLG0\h$X1_ECOL"
    fi

    local gsep="$X1_SCOLG0|$X1_ECOL" #green vert
    local user="$X1_SCOLG0\u@$X1_ECOL" #green user
    x1time="$X1_SCOLG0$x1time$X1_ECOL" #green time
    local dispdir="$X1_SCOLB$dispdir$X1_ECOL" #blue pwd
    PS1="$user$host$gsep$x1time$gsep$dispdir\$$stat> "
    X1_CMDTIME=$(date +%s) #reset timer
    #echo "$user$host$gsep$time$gsep$dispdir\$$stat> "
}
PROMPT_COMMAND=get_PS1

